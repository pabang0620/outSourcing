"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = __importDefault(require("webpack"));
const downloadTypes_1 = require("./helpers/downloadTypes");
const plugin_1 = require("./plugin");
const constants_1 = require("./constants");
jest.mock('./helpers/downloadTypes');
const mockDownloadTypes = downloadTypes_1.downloadTypes;
const mockAfterEmit = jest.fn();
const { ModuleFederationPlugin } = webpack_1.default.container;
const mockLogger = {
    log: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
function installPlugin(moduleFederationPluginOptions = {}, typesPluginOptions) {
    const pluginInstance = new plugin_1.ModuleFederationTypesPlugin(typesPluginOptions);
    pluginInstance.apply({
        getInfrastructureLogger: jest.fn().mockReturnValue(mockLogger),
        options: {
            plugins: [
                new ModuleFederationPlugin(moduleFederationPluginOptions),
            ],
        },
        hooks: {
            afterEmit: {
                tap: mockAfterEmit,
            },
            beforeRun: {
                tapPromise: (_, callback) => callback({}),
            },
            watchRun: {
                tap: (_, callback) => callback({}),
            },
        },
    });
    return pluginInstance;
}
describe('ModuleFederationTypesPlugin', () => {
    test('does nothing when options are not provided to the ModuleFederationPlugin', () => {
        installPlugin();
        expect(mockAfterEmit).not.toBeCalled();
    });
    test('remoteManifestUrls setting initiates download of remote entry manifest files on startup', () => {
        const moduleFederationPluginOptions = {
            name: 'mfeDashboard',
            remotes: {
                mfeOther: `mfeOther@[mfeOtherUrl]/remoteEntry.js`,
                mfeTranslations: 'mfeTranslations@[mfeTranslationsUrl]/remoteEntry.js',
            }
        };
        const typesPluginOptions = {
            remoteEntryUrls: {
                mfeApp: 'https://artifacts.example.com/mfe-app',
            },
            remoteManifestUrls: {
                mfeOther: 'https://example.com/some-mfe-remote-entry.json',
                registry: 'https://example.com/remote-entries.json',
            }
        };
        installPlugin(moduleFederationPluginOptions, typesPluginOptions);
        expect(mockDownloadTypes.mock.calls[0]).toEqual([
            constants_1.DEFAULT_DIR_EMITTED_TYPES,
            constants_1.DEFAULT_DIR_DOWNLOADED_TYPES,
            moduleFederationPluginOptions.remotes,
            typesPluginOptions.remoteEntryUrls,
            typesPluginOptions.remoteManifestUrls,
        ]);
    });
});
//# sourceMappingURL=plugin.spec.js.map