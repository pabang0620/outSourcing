"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
const util_1 = require("../util");
function checkNode(context, node) {
    const settings = (0, util_1.getSettings)(context);
    const msgs = (0, util_1.extractMessages)(node, settings);
    if (!msgs.length) {
        return;
    }
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            (0, icu_messageformat_parser_1.parse)(defaultMessage, {
                ignoreTag: settings.ignoreTag,
            });
        }
        catch (e) {
            const msg = e instanceof Error ? e.message : e;
            context.report({
                node: messageNode,
                message: `Error parsing ICU string: ${msg}`,
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: `Make sure ICU messages are formatted correctly with no bad select statements, plurals, etc.`,
            category: 'Errors',
            recommended: true,
        },
        fixable: 'code',
    },
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
