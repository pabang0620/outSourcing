"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
function checkNode(context, node) {
    const msgs = (0, util_1.extractMessages)(node, (0, util_1.getSettings)(context));
    const { options: [type], } = context;
    for (const [{ message: { description }, descriptionNode, },] of msgs) {
        if (!description) {
            if (type === 'literal' && descriptionNode) {
                context.report({
                    node: descriptionNode,
                    message: '`description` has to be a string literal (not function call or variable)',
                });
            }
            else if (!descriptionNode) {
                context.report({
                    node: node,
                    message: '`description` has to be specified in message descriptor',
                });
            }
        }
    }
}
exports.default = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce description in message descriptor',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#enforce-description',
        },
        fixable: 'code',
        schema: [
            {
                enum: ['literal', 'anything'],
            },
        ],
    },
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
