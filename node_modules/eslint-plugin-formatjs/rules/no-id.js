"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
function isComment(token) {
    return !!token && (token.type === 'Block' || token.type === 'Line');
}
function checkNode(context, node) {
    const msgs = (0, util_1.extractMessages)(node, (0, util_1.getSettings)(context));
    for (const [{ idPropNode }] of msgs) {
        if (idPropNode) {
            context.report({
                node: idPropNode,
                message: 'Manual `id` are not allowed in message descriptor',
                fix(fixer) {
                    const src = context.getSourceCode();
                    const token = src.getTokenAfter(idPropNode);
                    const fixes = [fixer.remove(idPropNode)];
                    if (token && !isComment(token) && token?.value === ',') {
                        fixes.push(fixer.remove(token));
                    }
                    return fixes;
                },
            });
        }
    }
}
exports.default = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Ban explicit ID from MessageDescriptor',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-id',
        },
        fixable: 'code',
    },
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
